#!/bin/bash
# WARNING: This script is not up to date with dotfiles layout and needs to be
# updated.
#
# Note that currently this config uses only dotfiles that are defaultly
# stored in home dir, if in the future there are any that should be stored
# in .config folder this requires modification.

GREEN='\033[1;32m'
RED='\033[1;31m'
BLUE='\033[1m\033[34m'
NOCOLOR='\033[0m'

# Grab all dotfiles in this folder
echo -e "${BLUE}==> Deploying dotfiles${NOCOLOR}"

# Link files in .config dir
NVIM_INIT_DIR="${HOME}/.config/nvim"
mkdir -p "${NVIM_INIT_DIR}"
ln -s ${PWD}/init.lua ${NVIM_INIT_DIR}/init.lua

TMUX_CONF_DIR="${HOME}/.config/tmux"
mkdir -p "${TMUX_CONF_DIR}"
ln -s ${PWD}/tmux.conf ${TMUX_CONF_DIR}/tmux.conf

dotfiles=`git ls-tree --name-only master | grep -E "^\.\w+" | grep -v .git`

# Link dotfiles to home dir
for file in $dotfiles; do
	ln -sf "${PWD}/${file}" ~/"${file}"
done

# Dectect if system is Mac
case ${OSTYPE} in
darwin*)
	echo -e "${GREEN}MacOS detected${NOCOLOR}"

	# Install homebrew
	echo -e "${BLUE}==> Installing brew${NOCOLOR}"
	if ! [ -x "`command -v brew`" ]; then
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
		if [ $? -ne 0 ]; then
			echo -e "${RED}Failed to install homebrew, config install abandoned${NOCOLOR}"
			exit 1
		fi
	else
		echo "Homebrew installed already, skipping"
	fi

	# Install homebrew programs from brewfile
	echo -e "${BLUE}==> Installing brew formulas${NOCOLOR}"
	brew bundle --file=${PWD}/brewfile

	echo -e "${BLUE}==> Installing bigger${NOCOLOR}"
	# Install Bigger
	curl -fsSL https://raw.githubusercontent.com/maciejzj/bigger/master/bigger.py > ./bigger.py \
		&& sudo install ./bigger.py /usr/local/bin && rm ./bigger.py
	if [ $? -ne 0 ]; then
		echo -e "${RED}Failed to install bigger, config will proceed${NOCOLOR}"
	fi

	# Silence lastlogin... message
	touch $HOME/.hushlogin
	;;
linux-gnu)
	echo -e "${GREEN}Linux detected${NOCOLOR}"

	echo -e "${GREEN}Instaling pacman pkgs${NOCOLOR}"
	sudo pacman -S --noconfirm < pkg-list.txt

	# Grab Linux specific dotfiles
	echo -e "${BLUE}==> Deploying Linux specific dotfiles${NOCOLOR}"
	cd linux
	dotfiles=`git ls-tree --name-only master | grep -E "^.\w+" | grep -v .git`
	# Link dotfiles to home dir
	for file in $dotfiles; do
		ln -sf "${PWD}/${file}" ~/"${file}"
	done
	cd -
	;;
*)
	echo -e "${RED}Did not detect compatible OS, config install abandoned${NOCOLOR}"
	exit 1
	;;
esac

# Install zsh prompt
echo -e "${BLUE}==> Installing pure prompt${NOCOLOR}"
mkdir -p "$HOME/.zsh"
git clone https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
if [ $? -ne 0 ]; then
	echo -e "${RED}Failed to install pure prompt, config will proceed${NOCOLOR}"
fi

# Install packer nvim plugin manager
echo -e "${BLUE}==> Installing packer{NOCOLOR}"
PACKER_INSTALL_DIR="${HOME}/.local/share/nvim/site/pack/packer/start"
if ! [ -f "$PACKER_INSTALL_DIR/packer.nvim" ]; then
	mkdir -p "${PACKER_INSTALL_DIR}"
	git clone --depth 1 https://github.com/wbthomason/packer.nvim\
		"${PACKER_INSTALL_DIR}/packer.nvim"
	if [ $? -ne 0 ]; then
		echo -e "${RED}Failed to install packer, config install abandoned${NOCOLOR}"
		exit 1
	fi
	echo -e "${GREEN}Packer installed successfully${NOCOLOR}"
else
	echo "Packer already installed, skipping"
fi

# Install vim packages
echo -e "${BLUE}==> Installing vim plugins${NOCOLOR}"
vim +PackerInstall +qall

# Install tmux
echo -e "${BLUE}==> Installing tmux-themepack${NOCOLOR}"
if ! [ -d "${TMUX_CONF_DIR}/tmux-themepack" ]; then
	git clone https://github.com/jimeh/tmux-themepack.git "${TMUX_CONF_DIR}/tmux-themepack"
	if [ $? -ne 0 ]; then
		echo -e "${RED}Failed to install tmux-themepack, config will proceed${NOCOLOR}"
	fi
	echo -e "${GREEN}Tmux-themepack installed successfully${NOCOLOR}"
else
	echo "Tmux-themepack already installed, skipping"
fi

# Install Python modules
echo -e "${BLUE}==> Installing pip packages${NOCOLOR}"
pip3 install -r requirements.txt

echo -e "${GREEN}Config finished${NOCOLOR}"
