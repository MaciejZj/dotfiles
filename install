#!/bin/env bash

# This script is intended to be pseudo-idempotent.

set -euo pipefail

GREEN='\033[1;32m'
BLUE='\033[1m\033[34m'
YELLOW="\033[1;33m"
RED='\033[1;31m'
NOCOLOR='\033[0m'

echo -e "${BLUE}==> Deploying dotfiles${NOCOLOR}"

# Deploy config files as symlinks based on the mappings file
while read -r map; do
	# The $(eval echo ...) expression is needed to expand environmental
	# variables inside mappings file
	src=$(cut -d " " -f 1 <<< "$(eval echo "$map")")
	dest=$(cut -d " " -f 2 <<< "$(eval echo "$map")")

	# This will not overwrite files unless they are symlinks
	if [ -e "${dest}" ] && [ ! -h "${dest}" ]; then
		echo -e "${YELLOW}Config file: ${dest} will be skipped because it already exists, remove it and rerun this script to install new config${NOCOLOR}"
		continue
	fi

	mkdir -p "$(dirname "$dest")"
	ln -f -s "$(realpath "$src")" "$dest"
done < mappings

# System-specific actions
case ${OSTYPE} in
# For MacOS
darwin*)
	echo -e "${GREEN}MacOS detected${NOCOLOR}"

	# Install homebrew
	echo -e "${BLUE}==> Installing brew${NOCOLOR}"
	if ! [ -x "$(command -v brew)" ]; then
		BREW_INSTALL_URL="https://raw.githubusercontent.com/Homebrew/install/master/install.sh"
		if ! /bin/bash -c "$(curl -fsSL "${BREW_INSTALL_URL}")"; then
			echo -e "${RED}Failed to install homebrew, config install abandoned${NOCOLOR}"
			exit 1
		fi
	else
		echo -e "${GREEN}Homebrew already installed, skipping${NOCOLOR}"
	fi

	# Install homebrew programs from brewfile
	echo -e "${BLUE}==> Installing brew formulas${NOCOLOR}"
	brew bundle --quiet --file=packages/macos/brewfile

	# Silence lastlogin... message
	touch "${HOME}"/.hushlogin
	;;
# For Linux distributions
linux-gnu)
	echo -e "${GREEN}Linux detected${NOCOLOR}"

	# Arch-based with pacman
	if [ -x "$(command -v pacman)" ]; then 
		echo -e "${BLUE}Installing pacman packages${NOCOLOR}"
		echo -e "${RED}Pacman packages not yet implemented${NOCOLOR}"
		exit 1
	# Debian based with apt
	elif [ -x "$(command -v apt)" ]; then
		echo -e "${BLUE}Installing apt packages${NOCOLOR}"

		sudo xargs apt install -y < packages/debian/pkglist

		if [ ! -x "$(command -v pyenv)" ]; then

			curl 'https://pyenv.run' | bash
			PYENV_VIRTENV_REPO_URL="https://github.com/pyenv/pyenv-virtualenv.git"
			git clone --quiet "${PYENV_VIRTENV_REPO_URL}" "$(pyenv root)/plugins/pyenv-virtualenv"
		fi
	else
		echo -e "${RED}Did not detect supported Linux package manager, config install abandoned${NOCOLOR}"
		exit 1
	fi
	;;
# Other systems not supported
*)
	echo -e "${RED}Did not detect compatible OS, config install abandoned${NOCOLOR}"
	exit 1
	;;
esac

# Install zsh prompt
echo -e "${BLUE}==> Installing pure prompt${NOCOLOR}"
mkdir -p "${XDG_DATA_HOME}/zsh"

if [ -d "${XDG_DATA_HOME}/zsh/pure" ]; then
	echo -e "${GREEN}Pure prompt already installed, skipping${NOCOLOR}"
elif ! git clone --quiet https://github.com/sindresorhus/pure.git "${XDG_DATA_HOME}/zsh/pure"; then
	echo -e "${RED}Failed to install pure prompt, config will proceed${NOCOLOR}"
fi

# XDG-compliant zsh history file has to be created manually
mkdir -p "${XDG_STATE_HOME}/zsh"

# Install packer nvim plugin manager
echo -e "${BLUE}==> Installing packer${NOCOLOR}"
PACKER_INSTALL_DIR="${HOME}/.local/share/nvim/site/pack/packer/start"
if ! [ -d "${PACKER_INSTALL_DIR}/packer.nvim" ]; then
	PACKER_GIT_REPO_URL="https://github.com/wbthomason/packer.nvim"
	mkdir -p "${PACKER_INSTALL_DIR}"
	if ! git clone --quiet --depth 1 "${PACKER_GIT_REPO_URL}" "${PACKER_INSTALL_DIR}/packer.nvim"; then
		echo -e "${RED}Failed to install packer, config install abandoned${NOCOLOR}"
		exit 1
	fi
	echo -e "${GREEN}Packer installed successfully${NOCOLOR}"
else
	echo -e "${GREEN}Packer already installed, skipping${NOCOLOR}"
fi

# Install vim packages
echo -e "${BLUE}==> Installing vim plugins${NOCOLOR}"
nvim +PackerInstall +qall

# Install tmux
echo -e "${BLUE}==> Installing tmux-themepack${NOCOLOR}"
TMUX_CONF_DIR="${XDG_CONFIG_HOME}/tmux"
if ! [ -d "${TMUX_CONF_DIR}/tmux-themepack" ]; then
	TMUX_GIT_REPO_URL="https://github.com/jimeh/tmux-themepack.git"
	if ! git clone --quiet "${TMUX_GIT_REPO_URL}" "${TMUX_CONF_DIR}/tmux-themepack"; then
		echo -e "${RED}Failed to install tmux-themepack, config will proceed${NOCOLOR}"
	fi
	echo -e "${GREEN}Tmux-themepack installed successfully${NOCOLOR}"
else
	echo -e "${GREEN}Tmux-themepack already installed, skipping${NOCOLOR}"
fi

echo -e "${BLUE}==> You use pyenv to install Python and obtain packages from packages/common/requirements.txt with pip${NOCOLOR}"

echo -e "${BLUE}==> You can use extra Linux dotfiles from gui_extras/linux for GUI setup with suckless user space tools${NOCOLOR}"

echo -e "${BLUE}==> You can use extra MacOS config files from gui_extras/mac for GUI setup${NOCOLOR}"

echo -e "${GREEN}Config finished${NOCOLOR}"
